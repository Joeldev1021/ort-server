/*
 * Copyright (C) 2023 The ORT Project Authors (See <https://github.com/oss-review-toolkit/ort-server/blob/main/NOTICE>)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package org.ossreviewtoolkit.server.dao.tables.runs.repository

import org.jetbrains.exposed.dao.LongEntity
import org.jetbrains.exposed.dao.LongEntityClass
import org.jetbrains.exposed.dao.id.EntityID
import org.jetbrains.exposed.dao.id.LongIdTable
import org.jetbrains.exposed.sql.and

import org.ossreviewtoolkit.server.model.runs.repository.VulnerabilityResolution

/**
 * A table to represent a vulnerability resolution, used within a
 * [RepositoryConfiguration][RepositoryConfigurationsTable].
 */
object VulnerabilityResolutionsTable : LongIdTable("vulnerability_resolutions") {
    val externalId = text("external_id")
    val reason = text("reason")
    val comment = text("comment")
}

class VulnerabilityResolutionDao(id: EntityID<Long>) : LongEntity(id) {
    companion object : LongEntityClass<VulnerabilityResolutionDao>(VulnerabilityResolutionsTable) {
        fun findByVulnerabilityResolution(
            vulnerabilityResolution: VulnerabilityResolution
        ): VulnerabilityResolutionDao? = find {
            VulnerabilityResolutionsTable.externalId eq vulnerabilityResolution.message and
                    (VulnerabilityResolutionsTable.reason eq vulnerabilityResolution.reason) and
                    (VulnerabilityResolutionsTable.comment eq vulnerabilityResolution.comment)
        }.singleOrNull()

        fun getOrPut(vulnerabilityResolution: VulnerabilityResolution): VulnerabilityResolutionDao =
            findByVulnerabilityResolution(vulnerabilityResolution) ?: new {
                externalId = vulnerabilityResolution.message
                reason = vulnerabilityResolution.reason
                comment = vulnerabilityResolution.comment
            }
    }

    var externalId by VulnerabilityResolutionsTable.externalId
    var reason by VulnerabilityResolutionsTable.reason
    var comment by VulnerabilityResolutionsTable.comment

    fun mapToModel() = VulnerabilityResolution(externalId, reason, comment)
}
