# Copyright (C) 2022 The ORT Project Authors (See <https://github.com/oss-review-toolkit/ort-server/blob/main/NOTICE>)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# License-Filename: LICENSE

ktor {
  deployment {
    port = 8080
    port = ${?PORT}
    watch = [ classes ]
  }

  application {
    modules = [ org.ossreviewtoolkit.server.core.ApplicationKt.module ]
  }
}

jwt {
  issuer = "http://localhost:8081/realms/master"
  issuer = ${?JWT_ISSUER}
  jwksUri = "http://localhost:8081/realms/master/protocol/openid-connect/certs"
  jwksUri = ${?JWT_URI}
  audience = "ort-server"
  audience = ${?JWT_AUDIENCE}
  realm = "master"
  realm = ${?JWT_REALM}
}

database {
  url = "jdbc:postgresql://localhost:5432"
  url = ${?DB_URL}
  name = "ort"
  name = ${?DB_NAME}
  schema = "ort_server"
  schema = ${?DB_SCHEMA}
  username = "postgres"
  username = ${?DB_USERNAME}
  password = "postgres"
  password = ${?DB_PASSWORD}
  poolsize = 5
  poolsize = ${?DB_POOLSIZE}
  sslmode = "verify-full"
  sslmode = ${?DB_SSLMODE}
  sslcert = ${?DB_SSLCERT}
  sslkey = ${?DB_SSLKEY}
  sslrootcert = ${?DB_SSLROOTCERT}
}

keycloak {
  accessTokenUrl = "http://keycloak:8080/realms/master/protocol/openid-connect/token"
  accessTokenUrl = ${?KEYCLOAK_ACCESS_TOKEN_URL}
  apiUrl = "http://keycloak:8080/admin/realms/master"
  apiUrl = ${?KEYCLOAK_API_URL}
  clientId = "ort-server"
  clientId = ${?KEYCLOAK_CLIENT_ID}
  apiUser = "admin"
  apiUser = ${?KEYCLOAK_API_USER}
  apiSecret = "admin"
  apiSecret = ${?KEYCLOAK_API_SECRET}
}

orchestrator {
  sender {
    type = "activeMQ"
    type = ${?ORCHESTRATOR_SENDER_TRANSPORT_TYPE}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?ORCHESTRATOR_SENDER_TRANSPORT_SERVER_URI}
    queueName = "orchestrator_queue"
    queueName = ${?ORCHESTRATOR_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?ORCHESTRATOR_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?ORCHESTRATOR_SENDER_TRANSPORT_PASSWORD}
  }
}

secretsProvider {
  name = "vault"
  name = ${?SECRETS_PROVIDER_NAME}
  vaultUri = ${?VAULT_URI}
  vaultRoleId = ${?VAULT_ROLE_ID}
  vaultSecretId = ${?VAULT_SECRET_ID}
  vaultRootPath = ${?VAULT_ROOT_PATH}
  vaultPrefix = ${?VAULT_PREFIX}
  vaultNamespace = ${?VAULT_NAMESPACE}
}

reportStorage {
  name = "database"
  name = ${?REPORT_STORAGE_NAME}
  namespace = "reports"
  namespace = ${?REPORT_STORAGE_NAMESPACE}
  inMemoryLimit = 1048576
  inMemoryLimit = ${?REPORT_STORAGE_IN_MEMORY_LIMIT}
}
