database {
  url = "jdbc:postgresql://localhost:5432"
  url = ${?DB_URL}
  name = "ort"
  name = ${?DB_NAME}
  schema = "ort_server"
  schema = ${?DB_SCHEMA}
  username = "postgres"
  username = ${?DB_USERNAME}
  password = "postgres"
  password = ${?DB_PASSWORD}
  poolsize = 5
  poolsize = ${?DB_POOLSIZE}
  sslmode = "verify-full"
  sslmode = ${?DB_SSLMODE}
  sslcert = ${?DB_SSLCERT}
  sslkey = ${?DB_SSLKEY}
  sslrootcert = ${?DB_SSLROOTCERT}
}

orchestrator {
  receiver {
    type = "activeMQ"
    type = ${?ORCHESTRATOR_RECEIVER_TRANSPORT_TYPE}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?ORCHESTRATOR_RECEIVER_TRANSPORT_SERVER_URI}
    queueName = "orchestrator_queue"
    queueName = ${?ORCHESTRATOR_RECEIVER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?ORCHESTRATOR_RECEIVER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?ORCHESTRATOR_RECEIVER_TRANSPORT_PASSWORD}
  }
}

analyzer {
  sender {
    type = "kubernetes"
    type = ${?ANALYZER_SENDER_TRANSPORT_TYPE}
    namespace = "ort-server"
    namespace = ${?ANALYZER_SENDER_TRANSPORT_NAMESPACE}
    imageName = "ort-server-analyzer-worker"
    imageName = ${?ANALYZER_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = ${?ANALYZER_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
    imagePullSecret = ${?ANALYZER_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
    restartPolicy = ${?ANALYZER_SENDER_TRANSPORT_RESTART_POLICY}
    backoffLimit = ${?ANALYZER_SENDER_TRANSPORT_BACKOFF_LIMIT}
    enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
    commands = ${?ANALYZER_COMMANDS}
    args = ${?ANALYZER_ARGS}
    mountSecrets = ${?ANALYZER_MOUNT_SECRETS}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?ANALYZER_SENDER_TRANSPORT_SERVER_URI}
    queueName = "analyzer_queue"
    queueName = ${?ANALYZER_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?ANALYZER_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?ANALYZER_SENDER_TRANSPORT_PASSWORD}
  }
}

advisor {
  sender {
    type = "kubernetes"
    type = ${?ADVISOR_SENDER_TRANSPORT_TYPE}
    namespace = "ort-server"
    namespace = ${?ADVISOR_SENDER_TRANSPORT_NAMESPACE}
    imageName = "ort-server-advisor-worker"
    imageName = ${?ADVISOR_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = ${?ADVISOR_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
    imagePullSecret = ${?ADVISOR_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
    restartPolicy = ${?ADVISOR_SENDER_TRANSPORT_RESTART_POLICY}
    backoffLimit = ${?ADVISOR_SENDER_TRANSPORT_BACKOFF_LIMIT}
    enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
    commands = ${?ADVISOR_COMMANDS}
    args = ${?ADVISOR_ARGS}
    mountSecrets = ${?ADVISOR_MOUNT_SECRETS}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?ADVISOR_SENDER_TRANSPORT_SERVER_URI}
    queueName = "advisor_queue"
    queueName = ${?ADVISOR_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?ADVISOR_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?ADVISOR_SENDER_TRANSPORT_PASSWORD}
  }
}

scanner {
  sender {
    type = "kubernetes"
    type = ${?SCANNER_SENDER_TRANSPORT_TYPE}
    namespace = "ort-server"
    namespace = ${?SCANNER_SENDER_TRANSPORT_NAMESPACE}
    imageName = "ort-server-scanner-worker"
    imageName = ${?SCANNER_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = ${?SCANNER_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
    imagePullSecret = ${?SCANNER_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
    restartPolicy = ${?SCANNER_SENDER_TRANSPORT_RESTART_POLICY}
    backoffLimit = ${?SCANNER_SENDER_TRANSPORT_BACKOFF_LIMIT}
    enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
    commands = ${?SCANNER_COMMANDS}
    args = ${?SCANNER_ARGS}
    mountSecrets = ${?SCANNER_MOUNT_SECRETS}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?SCANNER_SENDER_TRANSPORT_SERVER_URI}
    queueName = "scanner_queue"
    queueName = ${?SCANNER_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?SCANNER_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?SCANNER_SENDER_TRANSPORT_PASSWORD}
  }
}

evaluator {
  sender {
  type = "kubernetes"
  type = ${?EVALUATOR_SENDER_TRANSPORT_TYPE}
  namespace = "ort-server"
  namespace = ${?EVALUATOR_SENDER_TRANSPORT_NAMESPACE}
  imageName = "ort-server-evaluator-worker"
  imageName = ${?EVALUATOR_SENDER_TRANSPORT_IMAGE_NAME}
  imagePullPolicy = ${?EVALUATOR_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
  imagePullSecret = ${?EVALUATOR_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
  restartPolicy = ${?EVALUATOR_SENDER_TRANSPORT_RESTART_POLICY}
  backoffLimit = ${?EVALUATOR_SENDER_TRANSPORT_BACKOFF_LIMIT}
  enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
  commands = ${?EVALUATOR_SENDER_TRANSPORT_COMMANDS}
  args = ${?EVALUATOR_ARGS}
  mountSecrets = ${?EVALUATOR_MOUNT_SECRETS}
  serverUri = "amqp://localhost:61616"
  serverUri = ${?EVALUATOR_SENDER_TRANSPORT_SERVER_URI}
  queueName = "evaluator_queue"
  queueName = ${?EVALUATOR_SENDER_TRANSPORT_QUEUE_NAME}
  username = "username"
  username = ${?EVALUATOR_SENDER_TRANSPORT_USERNAME}
  password = "password"
  password = ${?EVALUATOR_SENDER_TRANSPORT_PASSWORD}
  }
}

reporter {
  sender {
    type = "kubernetes"
    type = ${?REPORTER_SENDER_TRANSPORT_TYPE}
    namespace = "ort-server"
    namespace = ${?REPORTER_SENDER_TRANSPORT_NAMESPACE}
    imageName = "ort-server-reporter-worker"
    imageName = ${?REPORTER_SENDER_TRANSPORT_IMAGE_NAME}
    imagePullPolicy = ${?REPORTER_SENDER_TRANSPORT_IMAGE_PULL_POLICY}
    imagePullSecret = ${?REPORTER_SENDER_TRANSPORT_IMAGE_PULL_SECRET}
    restartPolicy = ${?REPORTER_SENDER_TRANSPORT_RESTART_POLICY}
    backoffLimit = ${?REPORTER_SENDER_TRANSPORT_BACKOFF_LIMIT}
    enableDebugLogging = ${?ENABLE_KUBERNETES_DEBUG_LOGGING}
    commands = ${?REPORTER_COMMANDS}
    args = ${?REPORTER_ARGS}
    mountSecrets = ${?REPORTER_MOUNT_SECRETS}
    serverUri = "amqp://localhost:61616"
    serverUri = ${?REPORTER_SENDER_TRANSPORT_SERVER_URI}
    queueName = "reporter_queue"
    queueName = ${?REPORTER_SENDER_TRANSPORT_QUEUE_NAME}
    username = "username"
    username = ${?REPORTER_SENDER_TRANSPORT_USERNAME}
    password = "password"
    password = ${?REPORTER_SENDER_TRANSPORT_PASSWORD}
  }
}
