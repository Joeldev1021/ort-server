@startuml
entity AUTHOR {
* id: SERIAL
--
* name: TEXT
}

entity LICENSE_STRING {
* id: SERIAL
--
* name: TEXT
}

entity LICENSE_SPDX {
* id: SERIAL
--
* expression: TEXT
}

entity VCS_REPOSITORY {
<<from repository>>
* id: SERIAL
}

entity PROJECT_DECLARED_LICENSE {
* id: SERIAL
--
* fkLicenseString: INT
* fkProject: INT
}

entity PROJECT_UNMAPPED_LICENSE {
* id: SERIAL
--
* fkLicenseString: INT
* fkProject: INT
}

entity PROJECT_MAPPED_LICENSE {
* id: SERIAL
--
* fkLicenseString: INT
* fkLicenseSpdx: INT
* fkProject: INT
}

entity PROJECT_AUTHOR {
* id: SERIAL
--
* fkAuthor: INT
* fkProject: INT
}

entity PROJECT_SCOPE {
* id: SERIAL
--
* fkProject: INT
* name: VARCHAR(256)
}

entity PROJECT {
* id: SERIAL
--
* type: VARCHAR(32)
namespace: VARCHAR(256)
name: VARCHAR(256)
version: VARCHAR(64)
cpe: VARCHAR(256)
* definitionFilePath: VARCHAR(256)
declaredLicenseProcessed: INT
* homepageUrl: VARCHAR(256)
* vcsRepository: INT
* vcsRevision: VARCHAR(128)
* vcsPath: VARCHAR(256)
* vcsProcessedRepository: INT
* vcsProcessedRevision: VARCHAR(128)
* vcsProcessedPath: VARCHAR(256)
* fkAnalyzerResult: INT
}

entity PACKAGE_DECLARED_LICENSE {
* id: SERIAL
--
* fkLicenseString: INT
* fkPackage: INT
}

entity PACKAGE_UNMAPPED_LICENSE {
* id: SERIAL
--
* fkLicenseString: INT
* fkPackage: INT
}

entity PACKAGE_MAPPED_LICENSE {
* id: SERIAL
--
* fkLicenseString: INT
* fkLicenseSpdx: INT
* fkPackage: INT
}

entity PACKAGE_AUTHOR {
* id: SERIAL
--
* fkAuthor: INT
* fkPackage: INT
}

entity PACKAGE {
* id: SERIAL
--
* type: VARCHAR(32)
namespace: VARCHAR(256)
name: VARCHAR(256)
version: VARCHAR(64)
* purl: VARCHAR(256)
cpe: VARCHAR(256)
declaredLicenseProcessed: INT
concludedLicense: INT
* homepageUrl: VARCHAR(256)
* description: TEXT
* vcsRepository: INT
* vcsRevision: VARCHAR(128)
* vcsPath: VARCHAR(256)
* vcsProcessedRepository: INT
* vcsProcessedRevision: VARCHAR(128)
* vcsProcessedPath: VARCHAR(256)
* binaryArtifactUrl: VARCHAR(256)
* binaryArtifactHashValue: VARCHAR(256)
* binaryArtifactHashAlgorithm: VARCHAR(16)
* sourceArtifactUrl: VARCHAR(256)
* sourceArtifactHashValue: VARCHAR(256)
* sourceArtifactHashAlgorithm: VARCHAR(16)
isMetaDataOnly: BOOLEAN
isModified: BOOLEAN
}

entity ENVIRONMENT {
<<from repository>>
* id: SERIAL
}

entity PACKAGE_CURATION_DATA_AUTHOR {
* id: SERIAL
--
* fkAuthor: INT
* fkCuration: INT
}

entity PACKAGE_CURATION_DATA {
* id: SERIAL
--
comment: TEXT
purl: VARCHAR(256)
cpe: VARCHAR(256)
concludedLicense: INT
description: TEXT
homepageUrl: VARCHAR(256)
binaryArtifactUrl: VARCHAR(256)
binaryArtifactHashValue: VARCHAR(256)
binaryArtifactHashAlgorithm: VARCHAR(16)
sourceArtifactUrl: VARCHAR(256)
sourceArtifactHashValue: VARCHAR(256)
sourceArtifactHashAlgorithm: VARCHAR(16)
vcsRepository: INT
vcsRevision: VARCHAR(128)
vcsPath: VARCHAR(256)
isMetaDataOnly: BOOLEAN
isModified: BOOLEAN
}

entity PACKAGE_CURATION_RESULT {
* id: SERIAL
--
base: INT
curation: INT
fkCuratedPackage: INT
}

entity CURATED_PACKAGE {
* id: SERIAL
--
* fkPackage: INT
* fkAnalyzerResult: INT
}

entity ORT_ISSUE {
<<from repository>>
*id: SERIAL
}

entity DEPENDENCY_GRAPH_ROOT {
* id: SERIAL
--
* fkDependencyGraph: INT
* fkDependency: INT
fragment: INT = 0
representsProject: BOOLEAN = false
}

entity DEPENDENCY_GRAPH_NODE {
* id: SERIAL
--
* fkDependencyGraph: INT
* fkDependency: INT
fragment: INT = 0
linkage: INT = DYNAMIC
}

entity DEPENDENCY_GRAPH_EDGE {
* id: SERIAL
--
* fkDependencyGraph: INT
* fkFrom: INT
* fkTo: INT
}

entity DEPENDENCY_GRAPH {
* id: SERIAL
--
* fkAnalyzerResult: INT
* type: VARCHAR(32)
}

entity ANALYZER_RESULT_ISSUE {
* id: SERIAL
--
* fkAnalyzerResult: INT
* fkIssue: INT
*type: VARCHAR(32)
namespace: VARCHAR(256)
name: VARCHAR(256)
version: VARCHAR(32)
}

entity ANALYZER_RESULT {
* id: SERIAL
* startTime: TIMESTAMP
* endTime: TIMESTAMP
* fkEnvironment: INT
* config: JSONB
}

PROJECT_DECLARED_LICENSE::fkLicenseString -- LICENSE_STRING::id
PROJECT_DECLARED_LICENSE::fkProject -- PROJECT::id

PROJECT_UNMAPPED_LICENSE::fkLicenseString -- LICENSE_STRING::id
PROJECT_UNMAPPED_LICENSE::fkProject -- PROJECT::id

PROJECT_MAPPED_LICENSE::fkLicenseString -- LICENSE_STRING::id
PROJECT_MAPPED_LICENSE::fkLicenseSpdx -- LICENSE_SPDX::id
PROJECT_MAPPED_LICENSE::fkProject -- PROJECT::id

PROJECT_AUTHOR::fkAuthor -- AUTHOR::id
PROJECT_AUTHOR::fkProject -- PROJECT::id

PROJECT::declaredLicenseProcessed -- LICENSE_SPDX::id
PROJECT::vcsUrl -- VCS_REPOSITORY::id
PROJECT::vcsProcessedUrl -- VCS_REPOSITORY::id
PROJECT::id -- PROJECT_SCOPE::fkProject
PROJECT::fkAnalyzerResult -- ANALYZER_RESULT::id

PACKAGE_DECLARED_LICENSE::fkLicenseString -- LICENSE_STRING::id
PACKAGE_DECLARED_LICENSE::fkPackage -- PACKAGE::id

PACKAGE_UNMAPPED_LICENSE::fkLicenseString -- LICENSE_STRING::id
PACKAGE_UNMAPPED_LICENSE::fkPackage -- PACKAGE::id

PACKAGE_MAPPED_LICENSE::fkLicenseString -- LICENSE_STRING::id
PACKAGE_MAPPED_LICENSE::fkLicenseSpdx -- LICENSE_SPDX::id
PACKAGE_MAPPED_LICENSE::fkPackage -- PACKAGE::id

PACKAGE_AUTHOR::fkAuthor -- AUTHOR::id
PACKAGE_AUTHOR::fkPackage -- PACKAGE::id

PACKAGE::declaredLicenseProcessed -- LICENSE_SPDX::id
PACKAGE::concludedLicense -- LICENSE_SPDX::id
PACKAGE::vcsUrl -- VCS_REPOSITORY::id
PACKAGE::vcsProcessedUrl -- VCS_REPOSITORY::id

PACKAGE_CURATION_DATA_AUTHOR::fkAuthor -- AUTHOR::id
PACKAGE_CURATION_DATA_AUTHOR::fkCuration -- PACKAGE_CURATION_DATA::id

PACKAGE_CURATION_DATA::vcsRepository -- VCS_REPOSITORY::id

PACKAGE_CURATION_RESULT::base -- PACKAGE_CURATION_DATA::id
PACKAGE_CURATION_RESULT::curation -- PACKAGE_CURATION_DATA::id
PACKAGE_CURATION_RESULT::fkCuratedPackage -- CURATED_PACKAGE::id

CURATED_PACKAGE::fkPackage -- PACKAGE::id
CURATED_PACKAGE::fkAnalyzerResult -- ANALYZER_RESULT::id

ANALYZER_RESULT_ISSUE::fkIssue -- ORT_ISSUE::id
ANALYZER_RESULT_ISSUE::fkAnalyzerResult -- ANALYZER_RESULT::id

ANALYZER_RESULT::fkEnvironment -- ENVIRONMENT::id

DEPENDENCY_GRAPH::fkAnalyzerResult -- ANALYZER_RESULT::id

DEPENDENCY_GRAPH_ROOT::fkDependencyGraph -- DEPENDENCY_GRAPH::id
DEPENDENCY_GRAPH_ROOT::fkDependency -- PACKAGE::id

DEPENDENCY_GRAPH_NODE::fkDependencyGraph -- DEPENDENCY_GRAPH::id
DEPENDENCY_GRAPH_NODE::fkDependency -- PACKAGE::id

DEPENDENCY_GRAPH_EDGE::fkDependencyGraph -- DEPENDENCY_GRAPH::id
DEPENDENCY_GRAPH_EDGE::fkFrom -- DEPENDENCY_GRAPH_NODE::id
DEPENDENCY_GRAPH_EDGE::fkTo -- DEPENDENCY_GRAPH_NODE::id

@enduml
